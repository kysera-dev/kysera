name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch, or custom version)'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install system dependencies
        run: |
          # Install build tools required for native modules
          sudo apt-get update
          sudo apt-get install -y python3 python3-setuptools python-is-python3 make g++ build-essential

      - name: Install dependencies
        run: |
          # Set npm to use python3
          npm config set python python3
          # Install all dependencies
          pnpm install --frozen-lockfile
          # Rebuild better-sqlite3 specifically
          pnpm rebuild better-sqlite3
          # Alternative: use postinstall for better-sqlite3
          cd node_modules/.pnpm && \
          for dir in better-sqlite3*/node_modules/better-sqlite3; do \
            if [ -d "$dir" ]; then \
              echo "Rebuilding in $dir"; \
              cd "$dir" && npm run install --build-from-source && cd -; \
            fi; \
          done || true

      - name: Build packages
        run: pnpm build

      - name: Run tests
        run: pnpm test

      - name: Type check
        run: pnpm typecheck

  release:
    name: Release
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install system dependencies
        run: |
          # Install build tools required for native modules
          sudo apt-get update
          sudo apt-get install -y python3 python3-setuptools python-is-python3 make g++ build-essential

      - name: Install dependencies
        run: |
          # Set npm to use python3
          npm config set python python3
          # Install all dependencies
          pnpm install --frozen-lockfile
          # Rebuild better-sqlite3 specifically
          pnpm rebuild better-sqlite3
          # Alternative: use postinstall for better-sqlite3
          cd node_modules/.pnpm && \
          for dir in better-sqlite3*/node_modules/better-sqlite3; do \
            if [ -d "$dir" ]; then \
              echo "Rebuilding in $dir"; \
              cd "$dir" && npm run install --build-from-source && cd -; \
            fi; \
          done || true

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set access public

      - name: Build packages
        run: pnpm build

      - name: Create release pull request or publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm changeset publish
          version: pnpm changeset version
          commit: "chore(release): version packages"
          title: "chore(release): version packages"
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Sync versions after release
        if: steps.changesets.outputs.published == 'true'
        run: |
          pnpm exec tsx scripts/sync-versions.ts
          git add .
          git diff --staged --quiet || git commit -m "chore: sync package versions"
          git push

      - name: Create Docker images
        if: steps.changesets.outputs.published == 'true'
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/kysera/cli:latest \
            --tag ghcr.io/kysera/cli:${{ steps.changesets.outputs.publishedPackages[0].version }} \
            --push \
            apps/cli

      - name: Update documentation
        if: steps.changesets.outputs.published == 'true'
        run: |
          pnpm docs
          # Deploy docs to GitHub Pages or other documentation platform

      - name: Announce release
        if: steps.changesets.outputs.published == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const packages = ${{ steps.changesets.outputs.publishedPackages }}
            const version = packages[0].version

            // Create discussion or issue for release announcement
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              category_id: 'announcements',
              title: `ðŸŽ‰ Kysera v${version} Released!`,
              body: `We've just released Kysera v${version}!

              ## Packages Updated
              ${packages.map(pkg => `- ${pkg.name}@${pkg.version}`).join('\n')}

              ## Installation
              \`\`\`bash
              npm install @kysera/core@${version}
              npm install -g @kysera/cli@${version}
              \`\`\`

              Check out the [changelog](https://github.com/kysera/kysera/blob/main/CHANGELOG.md) for details!`
            })